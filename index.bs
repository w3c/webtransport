<pre class="metadata">
Title: WebTransport
Shortname: webtransport
Level: none
Status: w3c/ED
Group: webtransport
ED: https://w3c.github.io/webtransport/
TR: https://www.w3.org/TR/webtransport/
Editor: Bernard Aboba, w3cid 65611, Microsoft Corporation
Editor: Victor Vasiliev, w3cid 113328,Google
Editor: Yutaka Hirano, w3cid 100504,Google
Former Editor: Peter Thatcher, Google
Former Editor: Robin Raymond, Optical Tone Ltd.
Abstract:
  This document defines a set of ECMAScript APIs in WebIDL to allow data to be
  sent and received between a browser and server, utilizing [[WEB-TRANSPORT-HTTP3]].
  This specification is being developed in conjunction with a protocol
  specification developed by the IETF WEBTRANS Working Group.
Repository: w3c/webtransport
Indent: 2
Markup Shorthands: markdown yes
Boilerplate: omit conformance
</pre>
<pre class="biblio">
{
  "quic": {
    "authors": ["Jana Iyengar", "Martin Thomson"],
    "href": "https://tools.ietf.org/html/draft-ietf-quic-transport",
    "title": "QUIC: A UDP-Based Multiplexed and Secure Transport",
    "status": "Internet-Draft",
    "publisher": "IETF"
  },
  "quic-datagram": {
    "authors": ["Tommy Pauly", "Eric Kinnear", "David Schinazi"],
    "href": "https://datatracker.ietf.org/doc/html/draft-ietf-quic-datagram/",
    "title": "An Unreliable Datagram Extension to QUIC",
    "status": "Internet-Draft",
    "publisher": "IETF"
  },
  "web-transport-overview": {
    "authors": ["Victor Vasiliev"],
    "href": "https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-overview",
    "title": "WebTransport Protocol Framework",
    "status": "Internet-Draft",
    "publisher": "IETF"
  },
  "web-transport-http3": {
    "authors": ["Victor Vasiliev"],
    "href": "https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/",
    "title": "WebTransport over HTTP/3",
    "status": "Internet-Draft",
    "publisher": "IETF"
  }
}
</pre>
<pre class="link-defaults">
spec:infra; type:dfn; for:set; text:for each
spec:infra; type:dfn; for:/; text:set
spec:streams; type:interface; text:ReadableStream
spec:fetch; type:dfn; for:/; text:fetch
spec:url; type:dfn; text:scheme
spec:url; type:dfn; text:fragment
</pre>
<pre class="anchors">
url: https://html.spec.whatwg.org/multipage/origin.html#concept-origin; type: dfn; text: origin; for:/
urlPrefix: http://www.ecma-international.org/ecma-262/6.0/index.html; spec: ECMASCRIPT-6.0
  type: dfn
    text: fulfilled; url: sec-promise-objects
    text: rejected; url: sec-promise-objects
    text: pending; url: sec-promise-objects
    text: resolved; url: sec-promise-objects
    text: settled; url: sec-promise-objects
urlPrefix: https://heycam.github.io/webidl/; spec: WEBIDL
  type: dfn
    text: new DOMException(message, name); for:DOMException; url: dom-domexception-domexception
</pre>

# Introduction #    {#introduction}

*This section is non-normative.*

This specification uses [[!WEB-TRANSPORT-HTTP3]] to send data to and receive
data from servers. It can be used like WebSockets but with support for multiple
streams, unidirectional streams, out-of-order delivery, and reliable as well as
unreliable transport.

Note: The API presented in this specification represents a preliminary proposal
based on work-in-progress within the IETF WEBTRANS WG. Since the [[!WEB-TRANSPORT-HTTP3]]
specification is a work-in-progress, both the protocol and API are likely to
change significantly going forward.

# Conformance #  {#conformance}

As well as sections marked as non-normative, all authoring guidelines,
diagrams, examples, and notes in this specification are non-normative.
Everything else in this specification is normative.

The key words *MUST* and *SHOULD* are to be interpreted as described in
[[!RFC2119]].

This specification defines conformance criteria that apply to a single product:
the user agent that implements the interfaces that it contains.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be
easy to follow, and not intended to be performant.)

Implementations that use ECMAScript to implement the APIs defined in this
specification MUST implement them in a manner consistent with the ECMAScript
Bindings defined in the Web IDL specification [[!WEBIDL]], as this
specification uses that specification and terminology.

# Protocol concepts # {#protocol-concepts}

A <dfn for="protocol">WebTransport session</dfn> is a session of WebTransport over HTTP/3.
There may be multiple [=WebTransport sessions=] on one [=connection=], when pooling is enabled.

[=WebTransport session=] has the following capabilities defined in [[!WEB-TRANSPORT-HTTP3]].

<table class="data" dfn-for="session">
 <thead>
  <tr>
   <th>capability
   <th>definition
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>send a datagram</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.4](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.4)
  </tr>
  <tr>
   <td><dfn>receive a datagram</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.4](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.4)
  </tr>
  <tr>
   <td><dfn>create an [=stream/outgoing unidirectional=] stream</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.1](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.1)
  </tr>
  <tr>
   <td><dfn>create a [=stream/bidirectional=] stream</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.2](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.2)
  </tr>
  <tr>
   <td><dfn>receive an [=stream/incoming unidirectional=] stream</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.1](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.1)
  </tr>
  <tr>
   <td><dfn>receive a [=stream/bidirectional=] stream</dfn>
   <td>[[!WEB-TRANSPORT-HTTP3]]
   [section 4.2](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-4.2)
  </tr>
 </tbody>
</table>

To <dfn for=session>establish</dfn> a [=WebTransport session=] with an [=/origin=] |origin|,
follow [[!WEB-TRANSPORT-HTTP3]]
[section 3.3](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-3.3),
with using |origin|, [=ASCII serialization of an origin|serialized=] and [=isomorphic encoded=],
as the [:Origin:] header of the request.
When establishing a session, the client MUST NOT provide any [=credentials=].

To <dfn for=session>terminate</dfn> a [=WebTransport session=] |session| with an optional integer
|code| and an optional [=byte sequence=] |reason|, follow [[!WEB-TRANSPORT-HTTP3]]
[section 5](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-5).

A [=WebTransport session=] |session| is <dfn for=session>terminated</dfn>, with optionally
an integer |code| and a [=byte sequence=] |reason|, when the HTTP/3 stream associated with the
CONNECT request that initiated |session| is closed by the server, as described at
[[!WEB-TRANSPORT-HTTP3]]
[section 5](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-5).

<dfn>WebTransport stream</dfn> is a concept for HTTP/3 stream on a [=WebTransport session=].

A [=WebTransport stream=] is one of <dfn for=stream>incoming unidirectional</dfn>,
<dfn for=stream>outgoing unidirectional</dfn> or <dfn for=stream>bidirectional</dfn>.

[=WebTransport stream=] has the following capabilities:

<table class="data" dfn-for="stream">
 <thead>
  <tr>
   <th>capability
   <th>definition
   <th>[=stream/incoming unidirectional=]
   <th>[=stream/outgoing unidirectional=]
   <th>[=stream/bidirectional=]
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>send</dfn> bytes (potentially with FIN)
   <td>[[!QUIC]]
   [section 2.2](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-2.2)
   <td>No
   <td>Yes
   <td>Yes
  </tr>
  <tr>
   <td><dfn>receive</dfn> bytes (potentially with FIN)
   <td>[[!QUIC]]
   [section 2.2](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-2.2)
   <td>Yes
   <td>No
   <td>Yes
  </tr>
  <tr>
   <td><dfn>send STOP_SENDING</dfn>
   <td>[[!QUIC]]
   [section 3.5](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-3.5)
   <td>Yes
   <td>No
   <td>Yes
  </tr>
  <tr>
   <td><dfn>reset</dfn> a [=WebTransport stream=]
   <td>[[!QUIC]]
   [section 19.4](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-19.4)
   <td>No
   <td>Yes
   <td>Yes
  </tr>
 </tbody>
</table>

[=WebTransport stream=] has the following signals:

<table class="data" dfn-for="stream-signal">
 <thead>
  <tr>
   <th>event
   <th>definition
   <th>[=stream/incoming unidirectional=]
   <th>[=stream/outgoing unidirectional=]
   <th>[=stream/bidirectional=]
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>STOP_SENDING</dfn>
   <td>[[!QUIC]]
   [section 3.5](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-3.5)
   <td>No
   <td>Yes
   <td>Yes
  </tr>
  <tr>
   <td><dfn>RESET_STREAM</dfn>
   <td>[[!QUIC]]
   [section 19.4](https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-19.4)
   <td>Yes
   <td>No
   <td>Yes
  </tr>
 </tbody>
</table>

# `WebTransportDatagramDuplexStream` Interface #  {#duplex-stream}

A <dfn interface>WebTransportDatagramDuplexStream</dfn> is a generic duplex stream.

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransportDatagramDuplexStream {
  readonly attribute ReadableStream readable;
  readonly attribute WritableStream writable;

  readonly attribute unsigned long maxDatagramSize;
  attribute double? incomingMaxAge;
  attribute double? outgoingMaxAge;
  attribute long incomingHighWaterMark;
  attribute long outgoingHighWaterMark;
};
</pre>

## Internal slots ## {#datagramduplexstream-internal-slots}

A {{WebTransportDatagramDuplexStream}} object has the following internal slots.

<table class="data" dfn-for="WebTransportDatagramDuplexStream" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[Readable]]`</dfn>
   <td class="non-normative">A {{ReadableStream}} for incoming datagrams.
  </tr>
  <tr>
   <td><dfn>`[[Writable]]`</dfn>
   <td class="non-normative">A {{WritableStream}} for outgoing datagrams.
  </tr>
  <tr>
   <td><dfn>`[[IncomingDatagramsQueue]]`</dfn>
   <td class="non-normative">A queue of pairs of an incoming datagram and a timestamp.
  </tr>
  <tr>
   <td><dfn>`[[IncomingDatagramsPullPromise]]`</dfn>
   <td class="non-normative">A promise set by [=pullDatagrams=], to wait for an incoming datagram.
  </tr>
  <tr>
   <td><dfn>`[[IncomingDatagramsHighWaterMark]]`</dfn>
   <td class="non-normative">An integer representing the [=high water mark=] of the incoming
   datagrams.
  </tr>
  <tr>
   <td><dfn>`[[IncomingDatagramsExpirationDuration]]`</dfn>
   <td class="non-normative">A {{double}} value representing the expiration duration for incoming
   datagrams (in milliseconds), or null.
  </tr>
  <tr>
   <td><dfn>`[[OutgoingDatagramsQueue]]`</dfn>
   <td class="non-normative">A queue of tuples of an outgoing datagram, a timestamp and a promise
   which is resolved when the datagram is sent or discarded.
  </tr>
  <tr>
   <td><dfn>`[[OutgoingDatagramsHighWaterMark]]`</dfn>
   <td class="non-normative">An integer representing the [=high water mark=] of the outgoing
   datagrams.
  </tr>
  <tr>
   <td><dfn>`[[OutgoingDatagramsExpirationDuration]]`</dfn>
   <td class="non-normative">A {{double}} value representing the expiration duration for outgoing
   datagrams (in milliseconds), or null.
  </tr>
  <tr>
   <td><dfn>`[[OutgoingMaxDatagramSize]]`</dfn>
   <td class="non-normative">An integer representing the maximum size for an outgoing datagram.
  </tr>
 </tbody>
</table>

The user agent MAY update {{[[OutgoingMaxDatagramSize]]}} for any {{WebTransport}} object whose
{{[[State]]}} is either `"connecting"` or `"connected"`.

 To <dfn export for="WebTransportDatagramDuplexStream" lt="create|creating">create</dfn> a
 {{WebTransportDatagramDuplexStream}} given a
 <dfn export for="WebTransportDatagramDuplexStream/create"><var>readable</var></dfn>, and
 a <dfn export for="WebTransportDatagramDuplexStream/create"><var>writable</var></dfn>,
 perform the following steps.

 1. Let |stream| be a [=new=] {{WebTransportDatagramDuplexStream}}, with:
    : {{WebTransportDatagramDuplexStream/[[Readable]]}}
    :: |readable|
    : {{WebTransportDatagramDuplexStream/[[Writable]]}}
    :: |writable|
    : {{[[IncomingDatagramsQueue]]}}
    :: an empty queue
    : {{[[IncomingDatagramsPullPromise]]}}
    :: null
    : {{[[IncomingDatagramsHighWaterMark]]}}
    :: an [=implementation-defined=] integer
    : {{[[IncomingDatagramsExpirationDuration]]}}
    :: null
    : {{[[OutgoingDatagramsQueue]]}}
    :: an empty queue
    : {{[[OutgoingDatagramsHighWaterMark]]}}
    :: an [=implementation-defined=] integer
       <div class="note">
        <p>This implementation-defined value should be tuned to ensure decent throughput, without
           jeopardizing the timeliness of transmitted data.</p>
       </div>
    : {{[[OutgoingDatagramsExpirationDuration]]}}
    :: null
    : {{[[OutgoingMaxDatagramSize]]}}
    :: an [=implementation-defined=] integer.
 1. Return |stream|.

## Attributes ##  {#datagram-duplex-stream-attributes}

: <dfn for="WebTransportDatagramDuplexStream" attribute>readable</dfn>
:: The getter steps are:
     1. Return [=this=].{{WebTransportDatagramDuplexStream/[[Readable]]}}.

: <dfn for="WebTransportDatagramDuplexStream" attribute>writable</dfn>
:: The getter steps are:
     1. Return [=this=].{{WebTransportDatagramDuplexStream/[[Writable]]}}.

: <dfn for="WebTransportDatagramDuplexStream" attribute>incomingMaxAge</dfn>
:: The getter steps are:
     1. Return [=this=].{{[[IncomingDatagramsExpirationDuration]]}}.
:: The setter steps are:
     1. Let |value| be the given value.
     1. If |value| is null or |value| > 0:
       1. Set [=this=].{{[[IncomingDatagramsExpirationDuration]]}} to |value|.

: <dfn for="WebTransportDatagramDuplexStream" attribute>maxDatagramSize</dfn>
:: The maximum size data that may be passed to {{WebTransportDatagramDuplexStream/writable}}.
   The getter steps are to return [=this=].{{[[OutgoingMaxDatagramSize]]}}.

: <dfn for="WebTransportDatagramDuplexStream" attribute>outgoingMaxAge</dfn>
:: The getter steps are:
     1. Return [=this=]'s {{[[OutgoingDatagramsExpirationDuration]]}}.
:: The setter steps are:
     1. Let |value| be the given value.
     1. If |value| is null or |value| > 0:
       1. Set [=this=]'s {{[[OutgoingDatagramsExpirationDuration]]}} to |value|.

: <dfn for="WebTransportDatagramDuplexStream" attribute>incomingHighWaterMark</dfn>
:: The getter steps are:
     1. Return [=this=].{{[[IncomingDatagramsHighWaterMark]]}}.
:: The setter steps are:
     1. Let |value| be the given value.
     1. If |value| ≥ 0:
       1. Set [=this=].{{[[IncomingDatagramsHighWaterMark]]}} to |value|.

: <dfn for="WebTransportDatagramDuplexStream" attribute>outgoingHighWaterMark</dfn>
:: The getter steps are:
     1. Return [=this=].{{[[OutgoingDatagramsHighWaterMark]]}}.
:: The setter steps are:
     1. Let |value| be the given value.
     1. If |value| ≥ 0:
       1. Set [=this=].{{[[OutgoingDatagramsHighWaterMark]]}} to |value|.

## Procedures ## {#datagram-duplex-stream-procedures}

To <dfn>pullDatagrams</dfn>, given a {{WebTransport}} object |transport|, run these steps:
1. Let |datagrams| be |transport|.{{[[Datagrams]]}}.
1. Assert: |datagrams|.{{[[IncomingDatagramsPullPromise]]}} is null.
1. Let |queue| be |datagrams|.{{[[IncomingDatagramsQueue]]}}.
1. If |queue| is empty, then:
  1. Set |datagrams|.{{[[IncomingDatagramsPullPromise]]}} to a new promise.
  1. Return |datagrams|.{{[[IncomingDatagramsPullPromise]]}}.
1. Let |bytes| and |timestamp| be the result of [=dequeuing=] |queue|.
1. Let |chunk| be a new {{Uint8Array}} object representing |bytes|.
1. [=ReadableStream/Enqueue=] |chunk| to |transport|.{{[[Datagrams]]}}.{{WebTransportDatagramDuplexStream/[[Readable]]}}.
1. Return [=a promise resolved with=] undefined.

To <dfn>receiveDatagrams</dfn>, given a {{WebTransport}} object |transport|, run these steps:
1. Let |timestamp| be a timestamp representing now.
1. Let |queue| be |datagrams|.{{[[IncomingDatagramsQueue]]}}.
1. Let |duration| be |datagrams|.{{[[IncomingDatagramsExpirationDuration]]}}.
1. If |duration| is null, then set |duration| to an [=implementation-defined=] value.
1. Let |session| be |transport|.{{[[Session]]}}.
1. While there are [=session/receive a datagram|available incoming datagrams=] on |session|:
  1. Let |datagram| be the result of [=session/receiving a datagram=] with |session|.
  1. Let |timestamp| be a timestamp representing now.
  1. Let |chunk| be a pair of |datagram| and |timestamp|.
  1. [=queue/Enqueue=] |chunk| to |queue|.
1. Let |toBeRemoved| be the length of |queue| minus |datagrams|.{{[[IncomingDatagramsHighWaterMark]]}}.
1. If |toBeRemoved| is positive, repeat [=queue/dequeuing=] |queue| |toBeRemoved| times.
1. While |queue| is not empty:
  1. Let |bytes| and |timestamp| be |queue|'s first element.
  1. If more than |duration| milliseconds have passed since |timestamp|, then [=queue/dequeue=] |queue|.
  1. Otherwise, [=iteration/break=] this loop.
1. If |queue| is not empty and |datagrams|.{{[[IncomingDatagramsPullPromise]]}} is non-null, then:
  1. Let |bytes| and |timestamp| be the result of [=queue/dequeuing=] |queue|.
  1. Let |promise| be |datagrams|.{{[[IncomingDatagramsPullPromise]]}}.
  1. Set |datagrams|.{{[[IncomingDatagramsPullPromise]]}} to null.
  1. [=WebTransport/Queue a network task=] with |transport| to run the following steps:
    1. Let |chunk| be a new {{Uint8Array}} object representing |bytes|.
    1. [=ReadableStream/Enqueue=] |chunk| to |datagrams|.{{WebTransportDatagramDuplexStream/[[Readable]]}}.
    1. [=Resolve=] |promise| with undefined.

The user agent SHOULD run [=receiveDatagrams=] for any {{WebTransport}} object whose
{{[[State]]}} is `"connected"` as soon as reasonably possible whenever the algorithm can make
progress.

<div algorithm>

The <dfn>writeDatagrams</dfn> algorithm is given a |transport| as parameter and
|data| as input. It is defined by running the following steps:

1. Let |timestamp| be a timestamp representing now.
1. If |data| is not a {{BufferSource}} object, then return [=a promise rejected with=] a {{TypeError}}.
1. Let |datagrams| be |transport|.{{[[Datagrams]]}}.
1. If |datagrams|.{{[[OutgoingMaxDatagramSize]]}} is less than |data|'s \[[ByteLength]], return
   [=a promise resolved with=] undefined.
1. Let |promise| be a new promise.
1. Let |bytes| be a copy of bytes which |data| represents.
1. Let |chunk| be a tuple of |bytes|, |timestamp| and |promise|.
1. Enqueue |chunk| to |datagrams|.{{[[OutgoingDatagramsQueue]]}}.
1. If the length of |datagrams|.{{[[OutgoingDatagramsQueue]]}} is less than
   |datagrams|.{{[[OutgoingDatagramsHighWaterMark]]}}, then [=resolve=] |promise| with undefined.
1. Return |promise|.

Note: The associated {{WritableStream}} calls [=writeDatagrams=] only when all the promises that
have been returned by [=writeDatagrams=] have been resolved. Hence the timestamp and the expiration
duration work well only when the web developer pays attention to
{{WritableStreamDefaultWriter/ready|WritableStreamDefaultWriter.ready}}.

</div>

<div algorithm>

To <dfn>sendDatagrams</dfn>, given a {{WebTransport}} object |transport|, run these steps:
1. Let |queue| be |datagrams|.{{[[OutgoingDatagramsQueue]]}}.
1. Let |duration| be |datagrams|.{{[[OutgoingDatagramsExpirationDuration]]}}.
1. If |duration| is null, then set |duration| to an [=implementation-defined=] value.
1. While |queue| is not empty:
  1. Let |bytes|, |timestamp| and |promise| be |queue|'s first element.
  1. If more than |duration| milliseconds have passed since |timestamp|, then:
     1. Remove the first element from |queue|.
     1. [=Queue a network task=] with |transport| to [=resolve=] |promise| with |undefined|.
  1. Otherwise, break this loop.
1. If |transport|.{{[[State]]}} is not `"connected"`, then return.
1. Let |maxSize| be |datagrams|.{{[[OutgoingMaxDatagramSize]]}}.
1. While |queue| is not empty:
  1. Let |bytes|, |timestamp| and |promise| be |queue|'s first element.
  1. If |bytes|'s length ≤ |maxSize|:
    1. If it is not possible to send |bytes| to the network immediately, then break this loop.
    1. [=session/Send a datagram=], with |transport|.{{[[Session]]}} and |bytes|.
  1. Remove the first element from |queue|.
  1. [=Queue a network task=] with |transport| to [=resolve=] |promise| with undefined.

</div>

The user agent SHOULD run [=sendDatagrams=] for any {{WebTransport}} object whose
{{[[State]]}} is `"connecting"` or `"connected"` as soon as reasonably possible whenever the
algorithm can make progress.

Note: Writing datagrams while the transport's {{[[State]]}} is `"connecting"` is allowed. The
datagrams are stored in {{[[OutgoingDatagramsExpirationDuration]]}}, and they can be discarded
in the same manner as the `"connected"` case. Once the transport's {{[[State]]}} becomes
`"connected"`, it will start sending stored datagrams.

# `WebTransport` Interface #  {#web-transport}

`WebTransport` provides an API to the HTTP/3 transport functionality
defined in [[!WEB-TRANSPORT-HTTP3]].

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransport {
  constructor(USVString url, optional WebTransportOptions options = {});

  Promise&lt;WebTransportStats&gt; getStats();
  readonly attribute Promise&lt;undefined&gt; ready;
  readonly attribute WebTransportReliabilityMode reliability;
  readonly attribute Promise&lt;WebTransportCloseInfo&gt; closed;
  undefined close(optional WebTransportCloseInfo closeInfo = {});

  readonly attribute WebTransportDatagramDuplexStream datagrams;

  Promise&lt;WebTransportBidirectionalStream&gt; createBidirectionalStream();
  /* a ReadableStream of WebTransportBidirectionalStream objects */
  readonly attribute ReadableStream incomingBidirectionalStreams;

  Promise&lt;WebTransportSendStream&gt; createUnidirectionalStream();
  /* a ReadableStream of WebTransportReceiveStream objects */
  readonly attribute ReadableStream incomingUnidirectionalStreams;
};

enum WebTransportReliabilityMode {
  "pending",
  "reliable-only",
  "supports-unreliable",
};
</pre>

## Internal slots ## {#webtransport-internal-slots}

A {{WebTransport}} object has the following internal slots.

<table class="data" dfn-for="WebTransport" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[SendStreams]]`</dfn>
   <td class="non-normative">An [=ordered set=] of {{WebTransportSendStream}}s owned by this {{WebTransport}}.
  </tr>
  <tr>
   <td><dfn>`[[ReceiveStreams]]`</dfn>
   <td class="non-normative">An [=ordered set=] of {{WebTransportReceiveStream}}s owned by this
   {{WebTransport}}.
  </tr>
  <tr>
   <td><dfn>`[[IncomingBidirectionalStreams]]`</dfn>
   <td class="non-normative">A {{ReadableStream}} consisting of {{WebTransportBidirectionalStream}}
   objects.
  </tr>
  <tr>
   <td><dfn>`[[IncomingUnidirectionalStreams]]`</dfn>
   <td class="non-normative">A {{ReadableStream}} consisting of {{WebTransportReceiveStream}}s.
  </tr>
  <tr>
   <td><dfn>`[[State]]`</dfn>
   <td class="non-normative">An enum indicating the state of the transport. One of `"connecting"`,
   `"connected"`, `"closed"`, and `"failed"`.
  </tr>
  <tr>
   <td><dfn>`[[Ready]]`</dfn>
   <td class="non-normative">A promise fulfilled when the associated [=WebTransport session=]
   gets [=session/established=], or rejected if the [=session/establish|establishment process=]
   failed.
  </tr>
  <tr>
   <td><dfn>`[[Reliability]]`</dfn>
   <td class="non-normative">A {{WebTransportReliabilityMode}} indicating whether
   unreliable (UDP) transport is supported or whether only reliable (TCP fallback)
   transport is used. Returns `"pending"` until a connection has been established.
  </tr>
  <tr>
   <td><dfn>`[[Closed]]`</dfn>
   <td class="non-normative">A promise fulfilled when the associated {{WebTransport}} object is
   closed gracefully, or rejected when it is closed abruptly or failed on initialization.
  </tr>
  <tr>
   <td><dfn>`[[Datagrams]]`</dfn>
   <td class="non-normative">A {{WebTransportDatagramDuplexStream}}.
  </tr>
  <tr>
   <td><dfn>`[[Session]]`</dfn>
   <td class="non-normative">A [=WebTransport session=] for this {{WebTransport}} object, or null.
  </tr>
</table>

## Constructor ##  {#webtransport-constructor}

<div algorithm="webtransport-contructor">
When the {{WebTransport/constructor()}} constructor is invoked, the user
agent MUST run the following steps:
1. Let |parsedURL| be the [=URL record=] resulting from [=URL parser|parsing=]
   {{WebTransport/constructor(url, options)/url}}.
1. If |parsedURL| is a failure, [=throw=] a {{SyntaxError}} exception.
1. If |parsedURL| [=scheme=] is not `https`, [=throw=] a {{SyntaxError}} exception.
1. If |parsedURL| [=fragment=] is not null, [=throw=] a {{SyntaxError}} exception.
1. Let |allowPooling| be {{WebTransport/constructor(url, options)/options}}'s
   {{WebTransportOptions/allowPooling}} if it exists, and false otherwise.
1. Let |dedicated| be the negation of |allowPooling|.
1. Let |serverCertificateHashes| be {{WebTransport/constructor(url, options)/options}}'s
   {{WebTransportOptions/serverCertificateHashes}} if it exists, and null otherwise.
1. If |dedicated| is false and |serverCertificateHashes| is non-null, then [=throw=] a
   {{TypeError}}.
1. Let |requireUnreliable| be {{WebTransport/constructor(url, options)/options}}'s
   {{WebTransportOptions/requireUnreliable}}.
1. Let |incomingDatagrams| be a [=new=] {{ReadableStream}}.
1. Let |outgoingDatagrams| be a [=new=] {{WritableStream}}.
1. Let |datagrams| be the result of [=WebTransportDatagramDuplexStream/creating=] a
   {{WebTransportDatagramDuplexStream}}, its [=WebTransportDatagramDuplexStream/create/readable=] set to
   |incomingDatagrams| and its [=WebTransportDatagramDuplexStream/create/writable=] set to |outgoingDatagrams|.
1. Let |transport| be a newly constructed {{WebTransport}} object, with:
    : {{[[SendStreams]]}}
    :: an empty [=ordered set=]
    : {{[[ReceiveStreams]]}}
    :: an empty [=ordered set=]
    : {{[[IncomingBidirectionalStreams]]}}
    :: a new {{ReadableStream}}
    : {{[[IncomingUnidirectionalStreams]]}}
    :: a new {{ReadableStream}}
    : {{[[State]]}}
    :: `"connecting"`
    : {{[[Ready]]}}
    :: a new promise
    : {{[[Reliability]]}}
    :: "pending"
    : {{[[Closed]]}}
    :: a new promise
    : {{[[Datagrams]]}}
    :: |datagrams|
    : {{[[Session]]}}
    :: null
1. Let |pullDatagramsAlgorithm| be an action that runs [=pullDatagrams=] with |transport|.
1. Let |writeDatagramsAlgorithm| be an action that runs [=writeDatagrams=] with |transport|.
1. [=ReadableStream/Set up=] |incomingDatagrams| with [=ReadableStream/set up/pullAlgorithm=]
   set to |pullDatagramsAlgorithm|, and [=ReadableStream/set up/highWaterMark=] set to 0.
1. [=WritableStream/Set up=] |outgoingDatagrams| with [=WritableStream/set up/writeAlgorithm=]
   set to |writeDatagramsAlgorithm|.
1. Let |pullBidirectionalStreamAlgorithm| be an action that runs [=pullBidirectionalStream=]
   with |transport|.
1. [=ReadableStream/Set up=] |transport|.{{[[IncomingBidirectionalStreams]]}} with
   [=ReadableStream/set up/pullAlgorithm=] set to |pullBidirectionalStreamAlgorithm|, and
   [=ReadableStream/set up/highWaterMark=] set to 0.
1. Let |pullUnidirectionalStreamAlgorithm| be an action that runs [=pullUnidirectionalStream=]
   with |transport|.
1. [=ReadableStream/Set up=] |transport|.{{[[IncomingUnidirectionalStreams]]}} with
   [=ReadableStream/set up/pullAlgorithm=] set to |pullUnidirectionalStreamAlgorithm|, and
   [=ReadableStream/set up/highWaterMark=] set to 0.
1. [=Initialize WebTransport over HTTP=] with |transport|, |parsedURL|, |dedicated|, and |requireUnreliable|.
1. Return |transport|.

</div>

<div algorithm>
To <dfn>initialize WebTransport over HTTP</dfn>, given a {{WebTransport}} object
<var>transport</var>, a [=URL record=] |url|, a boolean |dedicated|, and a boolean |http3Only|, run these steps.

1. Let |client| be |transport|'s [=relevant settings object=].
1. Let |origin| be |client|'s [=environment settings object/origin=].
1. Let |request| be a new [=/request=] whose [=request/URL=] is |url|, [=request/client=] is
   |client|, [=request/policy container=] is |client|'s
   [=environment settings object/policy container=], [=request/destination=] is an empty string,
   and [=request/origin=] is |origin|.
1. Run <a>report Content Security Policy violations for |request|</a>.
1. If [=should request be blocked by Content Security Policy?=] with |request| returns
   <b>"Blocked"</b>, or if |request| [=block bad port|should be blocked due to a bad port=]
   returns <b>blocked</b>, then abort the remaining steps and [=queue a network task=] with |transport|
   to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, then abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. [=Cleanup=] |transport| with |error|, |error| and true.
1. Let |networkPartitionKey| be the result of [=determining the network partition key=] with
   |transport|'s [=relevant settings object=].
1. Run the remaining steps [=in parallel=], but abort them whenever |transport|.{{[[State]]}} becomes `"closed"` or `"failed"`.
1. Let |newConnection| be "`no`" if |dedicated| is false; otherwise "`yes-and-dedicated`".
1. Let |connection| be the result of [=obtain a connection|obtaining a connection=] with
   |networkPartitionKey|, |url|, false, |newConnection|, and |http3Only|.
1. If |connection| is failure, then abort the remaining steps and [=queue a network task=] with
   |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, then abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. [=Cleanup=] |transport| with |error|.
1. Wait for |connection| to receive the first SETTINGS frame, and let |settings| be a dictionary that
   represents the SETTINGS frame.
1. If |settings| doesn't contain SETTINGS_ENABLE_WEBTRANPORT with a value of 1, or it doesn't
   contain H3_DATAGRAM with a value of 1, then abort the remaining steps and [=queue a network
   task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, then abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. [=Cleanup=] |transport| with |error|.
1. [=session/Establish=] a [=WebTransport session=] with |origin| on |connection|.

  Note: This step also contains the transport parameter exchange specified in [[!QUIC-DATAGRAM]].

1. If the previous step fails, abort the remaining steps and [=queue a network task=] with
   |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, then abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. [=Cleanup=] |transport| with |error|.
1. Let |session| be the established [=WebTransport session=].
1. Assert: |maxDatagramSize| is an integer.
1. [=Queue a network task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is not `"connecting"`:
    1. [=In parallel=], [=session/terminate=] |session|.
    1. Abort these steps.
  1. Set |transport|.{{[[State]]}} to `"connected"`.
  1. Set |transport|.{{[[Session]]}} to |session|.
  1. Set |transport|'s {{[[Reliability]]}} to `"supports-unreliable"`.
  1. [=Resolve=] |transport|.{{[[Ready]]}} with undefined.

</div>

<div algorithm="pullBidirectionalStream">
To <dfn>pullBidirectionalStream</dfn>, given a {{WebTransport}} object <var>transport</var>, run
these steps.

1. If |transport|.{{[[State]]}} is `"connecting"`, then return the result of performing the
   following steps [=upon fulfillment=] of |transport|.{{[[Ready]]}}:
  1. Return the result of [=pullBidirectionalStream=] with |transport|.
1. Let |session| be |transport|.{{[[Session]]}}.
1. Let |p| be a new promise.
1. Return |p| and run the remaining steps [=in parallel=].
1. Wait until there is an [=session/receive a bidirectional stream|available incoming bidirectional
   stream=].
1. Let |internalStream| be the result of [=session/receiving a bidirectional stream=].
1. [=Queue a network task=] with |transport| to run these steps:
  1. Let |stream| be the result of [=BidirectionalStream/creating=] a
     {{WebTransportBidirectionalStream}} with |internalStream| and |transport|.
  1. [=ReadableStream/Enqueue=] |stream| to |transport|.{{[[IncomingBidirectionalStreams]]}}.
  1. [=Resolve=] |p| with undefined.

</div>

<div algorithm>
To <dfn>pullUnidirectionalStream</dfn>, given a {{WebTransport}} object <var>transport</var>, run
these steps.

1. If |transport|.{{[[State]]}} is `"connecting"`, then return the result of performing the
   following steps [=upon fulfillment=] of |transport|.{{[[Ready]]}}:
  1. Return the result of [=pullUnidirectionalStream=] with |transport|.
1. Let |session| be |transport|.{{[[Session]]}}.
1. Let |p| be a new promise.
1. Return |p| and run the remaining steps [=in parallel=].
1. Wait until there is an
   [=session/receive an incoming unidirectional stream|available incoming unidirectional stream=].
1. Let |internalStream| be the result of [=session/receiving an incoming unidirectional stream=].
1. [=Queue a network task=] with |transport| to run these steps:
  1. Let |stream| be the result of [=WebTransportReceiveStream/creating=] a {{WebTransportReceiveStream}} with
     |internalStream| and |transport|.
  1. [=ReadableStream/Enqueue=] |stream| to |transport|.{{[[IncomingUnidirectionalStreams]]}}.
  1. [=Resolve=] |p| with undefined.

</div>

## Attributes ##  {#webtransport-attributes}

: <dfn for="WebTransport" attribute>ready</dfn>
:: On getting, it MUST return [=this=]'s {{[[Ready]]}}.
: <dfn for="WebTransport" attribute>closed</dfn>
:: On getting, it MUST return [=this=]'s {{[[Closed]]}}.
:: This promise MUST be [=resolved=] when the transport is closed; an
   implementation SHOULD include error information in the `reason` and
   `closeCode` fields of {{WebTransportCloseInfo}}.
: <dfn for="WebTransport" attribute>datagrams</dfn>
:: A single duplex stream for sending and receiving datagrams over this session.
   The getter steps for the `datagrams` attribute SHALL be:
     1. Return [=this=]'s {{[[Datagrams]]}}.
: <dfn for="WebTransport" attribute>incomingBidirectionalStreams</dfn>
:: Returns a {{ReadableStream}} of {{WebTransportBidirectionalStream}}s that have been
   received from the server.
   The getter steps for the `incomingBidirectionalStreams` attribute SHALL be:
     1. Return [=this=]'s {{[[IncomingBidirectionalStreams]]}}.
: <dfn for="WebTransport" attribute>incomingUnidirectionalStreams</dfn>
:: A {{ReadableStream}} of unidirectional streams, each represented by a
   {{WebTransportReceiveStream}}, that have been received from the server.
   The getter steps for `incomingUnidirectionalStreams` are:
     1. Return [=this=].{{[[IncomingUnidirectionalStreams]]}}.

: <dfn for="WebTransport" attribute>reliability</dfn>
:: Whether connection supports unreliable (over UDP) transport or only reliable
   (over TCP fallback) transport.
   Returns `"pending"` until a connection has been established.
   The getter steps are to return [=this=]'s {{[[Reliability]]}}.


## Methods ##  {#webtransport-methods}

<div algorithm>

: <dfn for="WebTransport" method>close(closeInfo)</dfn>
:: Terminates the [=WebTransport session=] associated with the WebTransport object.

   When close is called, the user agent MUST run the following steps:
     1. Let |transport| be [=this=].
     1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, then abort these steps.
     1. If |transport|.{{[[State]]}} is `"connecting"`:
       1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
          `"session"`.
       1. [=Cleanup=] |transport| with |error|.
       1. Abort these steps.
     1. Let |session| be |transport|.{{[[Session]]}}.
     1. Let |code| be |closeInfo|.{{WebTransportCloseInfo/closeCode}}.
     1. Let |reasonString| be the maximal [=code unit prefix=] of
        |closeInfo|.{{WebTransportCloseInfo/reason}} where the [=byte sequence/length=] of the
        [=UTF-8 encoded=] prefix doesn't exceed 1024.
     1. Let |reason| be |reasonString|, [=UTF-8 encoded=].
     1. [=In parallel=], [=session/terminate=] |session| with |code| and |reason|.

       Note: This also [=stream/resets=] or [=sends STOP_SENDING=] [=WebTransport streams=] contained in
       |transport|.{{[[SendStreams]]}} and {{[[ReceiveStreams]]}}.
     1. [=Cleanup=] |transport| with {{AbortError}} and |closeInfo|.

</div>

: <dfn for="WebTransport" method>getStats()</dfn>
:: Gathers stats for this {{WebTransport}}'s HTTP/3
   connection and reports the result asynchronously.</p>

   When getStats is called, the user agent MUST run the following steps:
     1. Let |transport| be [=this=].
     1. Let |p| be a new promise.
     1. Return |p| and continue the following steps [=in parallel=].
         1. Gather the stats from the underlying QUIC connection, including stats on datagrams.
         1. Wait for the stats to be ready.
         1. [=Queue a network task=] with |transport| to run the following steps:
           1. Let |stats| be a [=new=] {{WebTransportStats}} object representing the gathered stats.
           1. [=Resolve=] |p| with |stats|.

: <dfn for="WebTransport" method>createBidirectionalStream()</dfn>
:: Creates a {{WebTransportBidirectionalStream}} object for an outgoing bidirectional
   stream.  Note that the mere creation of a stream is not immediately visible to the peer until
   it is used to send data.

   When `createBidirectionalStream` is called, the user agent MUST run the
   following steps:

   1. Let |transport| be [=this=].
   1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`,
      return a new [=rejected=] promise with an {{InvalidStateError}}.
   1. Let |p| be a new promise.
   1. Run the following steps [=in parallel=], but abort them whenever |transport|'s
      {{[[State]]}} becomes `"closed"` or `"failed"`, and instead
      [=queue a network task=] with |transport| to [=reject=] |p| with an {{InvalidStateError}}.
      1. Wait for |transport|.{{[[State]]}} to be `"connected"`.
      1. Let |internalStream| be the result of [=creating a bidirectional stream=] with
         |transport|.{{[[Session]]}}.

        Note: This operation may take time, for example when the stream ID is exhausted. [[!QUIC]]
      1. [=Queue a network task=] with |transport| to run the following steps:
        1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`,
           [=reject=] |p| with an {{InvalidStateError}} and abort these steps.
        1. Let |stream| be the result of [=BidirectionalStream/creating=] a
           {{WebTransportBidirectionalStream}} with |internalStream| and |transport|.
        1. [=Resolve=] |p| with |stream|.
   1. return |p|.

: <dfn for="WebTransport" method>createUnidirectionalStream()</dfn>

:: Creates a {{WebTransportSendStream}} for an outgoing unidirectional stream.  Note
   that the mere creation of a stream is not immediately visible to the server until it is used
   to send data.

   When `createUnidirectionalStream()` method is called, the user agent MUST
   run the following steps:
     1. Let |transport| be [=this=].
     1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`,
        return a new [=rejected=] promise with an {{InvalidStateError}}.
     1. Let |p| be a new promise.
     1. Run the following steps [=in parallel=], but abort them whenever |transport|'s
        {{[[State]]}} becomes `"closed"` or `"failed"`, and instead
        [=queue a network task=] with |transport| to [=reject=] |p| with an {{InvalidStateError}}.
        1. Wait for |transport|.{{[[State]]}} to be `"connected"`.
        1. Let |internalStream| be the result of [=creating an outgoing unidirectional stream=] with
           |transport|.{{[[Session]]}}.

          Note: This operation may take time, for example when the stream ID is exhausted. [[!QUIC]]
        1. [=Queue a network task=] with |transport| to run the following steps:
          1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`,
             [=reject=] |p| with an {{InvalidStateError}} and abort these steps.
          1. Let |stream| be the result of [=WebTransportSendStream/creating=] a {{WebTransportSendStream}} with
             |internalStream| and |transport|.
          1. [=Resolve=] |p| with |stream|.
     1. return |p|.

## Procedures ##  {#webtransport-procedures}

<div algorithm="cleanup a WebTransport">
To <dfn for="WebTransport">cleanup</dfn> a {{WebTransport}} |transport| with |reason|,
|error| and a boolean |abruptly|, run these steps:
1. Let |sendStreams| be a copy of |transport|.{{[[SendStreams]]}}.
1. Let |receiveStreams| be a copy of |transport|.{{[[ReceiveStreams]]}}.
1. Let |ready| be |transport|.{{[[Ready]]}}.
1. Let |closed| be |transport|.{{[[Closed]]}}.
1. Let |incomingBidirectionalStreams| be |transport|.{{[[IncomingBidirectionalStreams]]}}.
1. Let |incomingUnidirectionalStreams| be |transport|.{{[[IncomingUnidirectionalStreams]]}}.
1. Set |transport|.{{[[SendStreams]]}} to an empty [=set=].
1. Set |transport|.{{[[ReceiveStreams]]}} to an empty [=set=].
1. If |closeInfo| is given, then set |transport|.{{[[State]]}} to `"closed"`.
   Otherwise, set |transport|.{{[[State]]}} to `"failed"`.
1. [=For each=] |sendStream| in |sendStreams|, [=WritableStream/error=] |sendStream| with |error|.
1. [=For each=] |receiveStream| in |receiveStreams|, [=ReadableStream/error=] |receiveStream|
   with |error|.

  Note: Script authors can inject code which runs in Promise resolution synchronously. Hence
  from here, do not touch |transport| as it may be mutated by scripts in an unpredictable way.
  This applies to logic calling this procedure, too.

1. If |closeInfo| is given, then:
  1. [=Resolve=] |closed| with |closeInfo|.
  1. Assert: |ready| is [=settled=].
  1. [=ReadableStream/Close=] |incomingBidirectionalStreams|.
  1. [=ReadableStream/Close=] |incomingUnidirectionalStreams|.
1. Otherwise:
  1. [=Reject=] |closed| with |error|.
  1. [=Reject=] |ready| with |error|.
  1. [=ReadableStream/Error=] |incomingBidirectionalStreams| with |error|.
  1. [=ReadableStream/Error=] |incomingUnidirectionalStreams| with |error|.

</div>

<div algorithm>

To <dfn for="WebTransport">queue a network task</dfn> with a {{WebTransport}} |transport| and a
series of steps |steps|, run these steps:
1. [=Queue a global task=] on the [=network task source=] with |transport|'s
   [=relevant global object=] to run |steps|.

</div>

## Session termination not initiated by the client ## {#web-transport-termination}

<div algorithm="termination-initiated-by-server">
Whenever a [=WebTransport session=] which is associated with a {{WebTransport}} |transport| is
[=session/terminated=] with optionally |code| and |reasonBytes|, run these steps:

1. Let |cleanly| be a boolean representing whether the HTTP/3 stream associated with the CONNECT
   request that initiated |transport|.{{[[Session]]}} is in the "Data Recvd" state. [[!QUIC]]
1. [=Queue a network task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. If |cleanly| is false, then [=Cleanup|cleanup=] |transport| with |error|, and abort these steps.
  1. Let |closeInfo| be a [=new=] {{WebTransportCloseInfo}}.
  1. If |code| is given, set |closeInfo|'s {{WebTransportCloseInfo/closeCode}} to |code|.
  1. If |reasonBytes| is given, set |closeInfo|'s {{WebTransportCloseInfo/reason}} to |reasonBytes|,
     [=UTF-8 decoded=].
  1. [=Cleanup=] |transport| with |error| and |closeInfo|.

</div>

<div algorithm="termination-caused-by-connection-error">
Whenever a [=connection=] associated with a {{WebTransport}} |transport| gets a connection error,
run these steps:

1. [=Queue a network task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, abort these steps.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"session"`.
  1. [=Cleanup=] |transport| with |error|, |error| and true.

</div>

## Context cleanup steps ##  {#web-transport-context-cleanup-steps}

This specification defines [=unloading document cleanup steps=] as the following steps, given a
{{Document}} document:

1. Let |window| be |document|'s [=relevant global object=].
1. For each {{WebTransport}} |transport| whose [=relevant global object=] is |window|:
  1. If |transport|.{{[[State]]}} is `"connected"`, set |transport|.{{[[State]]}} to `"failed"`
     and [=session/terminate=] |transport|.{{[[Session]]}} [=in parallel=].
  1. If |transport|.{{[[State]]}} is `"connecting"`, set |transport|.{{[[State]]}} to
     `"failed"`.

  Issue: This needs to be done in workers too. See
  <a href="https://www.github.com/w3c/webtransport/issues/127">#127</a> and
  <a href="https://www.github.com/whatwg/html/issues/6831">whatwg/html#6731</a>.

## Garbage Collection ## {#web-transport-gc}

The user agent MUST NOT garbage collect a {{WebTransport}} object whose {{[[State]]}} is either
`"connecting"` or `"connected"`.

## Configuration ##  {#web-transport-configuration}

<pre class="idl">
dictionary WebTransportHash {
  DOMString algorithm;
  BufferSource value;
};

dictionary WebTransportOptions {
  boolean allowPooling = false;
  boolean requireUnreliable = false;
  sequence&lt;WebTransportHash&gt; serverCertificateHashes;
};
</pre>

<dfn dictionary>WebTransportOptions</dfn> is a dictionary of parameters
that determine how WebTransport connection is established and used.

: <dfn for="WebTransportOptions" dict-member>allowPooling</dfn>
:: When set to true, the WebTransport connection can be pooled, that is, the network connection for
   the WebTransport session can be shared with other HTTP/3 sessions.

: <dfn for="WebTransportOptions" dict-member>requireUnreliable</dfn>
:: When set to true, the WebTransport connection cannot be established over HTTP/2 if
   an HTTP/3 connection is not possible.

: <dfn for="WebTransportOptions" dict-member>serverCertificateHashes</dfn>
:: This option is only supported for transports using dedicated connections.
   For transport protocols that do not support this feature, having this
   field non-empty SHALL result in a {{NotSupportedError}} exception being thrown.
:: If supported and non-empty, the user agent SHALL deem a server certificate
   trusted if and only if it can successfully [=verify a certificate hash=] against
   {{WebTransportOptions/serverCertificateHashes}}
   and satisfies [=custom certificate requirements=].  The user agent SHALL
   ignore any hash that uses an unknown {{WebTransportHash/algorithm}}.
   If empty, the user agent SHALL use certificate verification procedures it would
   use for normal [=fetch=] operations.
:: This cannot be used with {{WebTransportOptions/allowPooling}}.

<div algorithm>
To <dfn>compute a certificate hash</dfn>, do the following:
1. Let |cert| be the input certificate, represented as a DER encoding of
   Certificate message defined in [[!RFC5280]].
1. Compute the SHA-256 hash of |cert| and return the computed value.

</div>

<div algorithm>
To <dfn>verify a certificate hash</dfn>, do the following:
1. Let |hashes| be the input array of hashes.
1. Let |referenceHash| be the [=compute a certificate hash|computed hash=] of the input certificate.
1. For every hash |hash| in |hashes|:
   1. If |hash|.{{WebTransportHash/value}} is not null:
     1. Let |hashValue| be the byte sequence which |hash|.{{WebTransportHash/value}} represents.
     1. If {{WebTransportHash/algorithm}} of |hash| is equal to "sha-256", and |hashValue| is equal
        to |referenceHash|, the certificate is valid. Return true.
1. Return false.

</div>

The <dfn>custom certificate requirements</dfn> are as follows: the certificate
MUST be an X.509v3 certificate as defined in [[!RFC5280]], the key used in the
Subject Public Key field MUST be one of the [=allowed public key algorithms=],
the current time MUST be within the validity period of the certificate as
defined in Section 4.1.2.5 of [[!RFC5280]] and the total length of the validity
period MUST NOT exceed two weeks.  The user agent MAY impose additional
[=implementation-defined=] requirements on the certificate.

The exact list of <dfn>allowed public key algorithms</dfn> used in the Subject
Public Key Info field (and, as a consequence, in the TLS CertificateVerify
message) is [=implementation-defined=]; however, it MUST include ECDSA with the
secp256r1 (NIST P-256) named group ([[!RFC3279]], Section 2.3.5; [[!RFC8422]])
to provide an interoperable default.  It MUST NOT contain RSA keys
([[!RFC3279]], Section 2.3.1).

## `WebTransportCloseInfo` Dictionary ##  {#web-transport-close-info}

The <dfn dictionary>WebTransportCloseInfo</dfn> dictionary includes information
relating to the error code for closing a {{WebTransport}}. This
information is used to set the error code and reason for a CONNECTION_CLOSE
frame.

<pre class="idl">
dictionary WebTransportCloseInfo {
  unsigned long closeCode = 0;
  DOMString reason = "";
};
</pre>

The dictionary SHALL have the following attributes:

: <dfn for="WebTransportCloseInfo" dict-member>closeCode</dfn>
:: The error code communicated to the peer.
: <dfn for="WebTransportCloseInfo" dict-member>reason</dfn>
:: The reason for closing the {{WebTransport}}.

## `WebTransportStats` Dictionary ##  {#web-transport-stats}

The <dfn dictionary>WebTransportStats</dfn> dictionary includes information
on HTTP/3 connection stats.

Issue: Now that quic-transport has been removed, this section needs to be
revised. Some of those are safe to expose for HTTP/2 and HTTP/3 connections
(like min-RTT), while most would either result in information disclosure
or are impossible to define for pooled connections.

<pre class="idl">
dictionary WebTransportStats {
  DOMHighResTimeStamp timestamp;
  unsigned long long bytesSent;
  unsigned long long packetsSent;
  unsigned long long packetsLost;
  unsigned long numOutgoingStreamsCreated;
  unsigned long numIncomingStreamsCreated;
  unsigned long long bytesReceived;
  unsigned long long packetsReceived;
  DOMHighResTimeStamp smoothedRtt;
  DOMHighResTimeStamp rttVariation;
  DOMHighResTimeStamp minRtt;
  WebTransportDatagramStats datagrams;
};
</pre>

The dictionary SHALL have the following attributes:

: <dfn for="WebTransportStats" dict-member>timestamp</dfn>
:: The `timestamp` for when the stats are gathered, relative to the
   UNIX epoch (Jan 1, 1970, UTC).
: <dfn for="WebTransportStats" dict-member>bytesSent</dfn>
:: The number of bytes sent on the QUIC connection, including retransmissions.
   Does not include UDP or any other outer framing.
: <dfn for="WebTransportStats" dict-member>packetsSent</dfn>
:: The number of packets sent on the QUIC connection, including those that are determined to have been lost.
: <dfn for="WebTransportStats" dict-member>packetsLost</dfn>
:: The number of packets lost on the QUIC connection (does not monotonically increase, because packets that are declared lost can subsequently be received).
: <dfn for="WebTransportStats" dict-member>numOutgoingStreamsCreated</dfn>
:: The number of outgoing QUIC streams created on the QUIC connection.
: <dfn for="WebTransportStats" dict-member>numIncomingStreamsCreated</dfn>
:: The number of incoming QUIC streams created on the QUIC connection.
: <dfn for="WebTransportStats" dict-member>bytesReceived</dfn>
:: The number of total bytes received on the QUIC connection, including
   duplicate data for streams. Does not include UDP or any other outer framing.
: <dfn for="WebTransportStats" dict-member>packetsReceived</dfn>
:: The number of total packets received on the QUIC connection, including
   packets that were not processable.
: <dfn for="WebTransportStats" dict-member>smoothedRtt</dfn>
:: The smoothed round-trip time (RTT) currently observed on the connection, as defined
   in [[!RFC9002]] [Section 5.3](https://www.rfc-editor.org/rfc/rfc9002#section-5.3).
: <dfn for="WebTransportStats" dict-member>rttVariation</dfn>
:: The mean variation in round-trip time samples currently observed on the
   connection, as defined in [[!RFC9002]]
   [Section 5.3](https://www.rfc-editor.org/rfc/rfc9002#section-5.3).
: <dfn for="WebTransportStats" dict-member>minRtt</dfn>
:: The minimum round-trip time observed on the entire connection.

## `WebTransportDatagramStats` Dictionary ##  {#web-transport-stats}

The <dfn dictionary>WebTransportDatagramStats</dfn> dictionary includes statistics
on datagram transmission over the HTTP/3 connection.

<pre class="idl">
dictionary WebTransportDatagramStats {
  DOMHighResTimeStamp timestamp;
  unsigned long long expiredOutgoing;
  unsigned long long droppedIncoming;
  unsigned long long lostOutgoing;
};
</pre>

The dictionary SHALL have the following attributes:

: <dfn for="WebTransportDatagramStats" dict-member>timestamp</dfn>
:: The `timestamp` for when the stats are gathered, relative to the
   UNIX epoch (Jan 1, 1970, UTC).
: <dfn for="WebTransportDatagramStats" dict-member>expiredOutgoing</dfn>
:: The number of datagrams queued for sending that were dropped, due to being
   older than {{outgoingMaxAge}} before they were able to be sent.
: <dfn for="WebTransportDatagramStats" dict-member>droppedIncoming</dfn>
:: The number of incoming datagrams that were dropped, due to the application not reading
  from {{WebTransport/datagrams}}' {{WebTransportDatagramDuplexStream/readable}}
  before new datagrams overflow the receive queue.
: <dfn for="WebTransportDatagramStats" dict-member>lostOutgoing</dfn>
:: The number of sent datagrams that were declared lost, as defined in
   [[!RFC9002]] [Section 6.1](https://www.rfc-editor.org/rfc/rfc9002#section-6.1).

# Interface `WebTransportSendStream` #  {#send-stream}

A {{WebTransportSendStream}} is a {{WritableStream}} providing outgoing streaming
features with an [=outgoing unidirectional=] or [=bidirectional=]
[=WebTransport stream=].

It is a {{WritableStream}} of {{Uint8Array}} that can be written to, to send
data to the server.

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransportSendStream : WritableStream {
  Promise&lt;WebTransportSendStreamStats&gt; getStats();
};
</pre>

A {{WebTransportSendStream}} is always created by the
[=WebTransportSendStream/create=] procedure.

## Methods ##  {#send-stream-methods}

: <dfn for="WebTransportSendStream" method>getStats()</dfn>
:: Gathers stats specific to this {{WebTransportSendStream}}'s performance,
   and reports the result asynchronously.</p>

   When getStats is called, the user agent MUST run the following steps:
     1. Let |p| be a new promise.
     1. Return |p| and continue the following steps [=in parallel=].
         1. Gather the stats specific to this {{WebTransportSendStream}}.
         1. Wait for the stats to be ready.
         1. [=Queue a network task=] with |transport| to run the following steps:
           1. Let |stats| be a [=new=] {{WebTransportSendStreamStats}} object
              representing the gathered stats.
           1. [=Resolve=] |p| with |stats|.

## Internal Slots ## {#send-stream-internal-slots}

A {{WebTransportSendStream}} has the following internal slots.

<table class="data" dfn-for="WebTransportSendStream" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[InternalStream]]`</dfn>
   <td class="non-normative">An [=outgoing unidirectional=] or [=bidirectional=]
   [=WebTransport stream=].
  </tr>
  <tr>
   <td><dfn>`[[PendingOperation]]`</dfn>
   <td class="non-normative">A promise representing a pending write or close operation, or null.
  </tr>
  <tr>
   <td><dfn>`[[Transport]]`</dfn>
   <td class="non-normative">A {{WebTransport}} which owns this {{WebTransportSendStream}}.
  </tr>
 <tbody>
</table>

## Procedures ##  {#send-stream-procedures}

<div algorithm="create a SendStream">

To <dfn export for="WebTransportSendStream" lt="create|creating">create</dfn> a
{{WebTransportSendStream}}, with an [=outgoing unidirectional=] or [=bidirectional=] [=WebTransport stream=]
|internalStream| and a {{WebTransport}} |transport|, run these steps:

1. Let |stream| be a [=new=] {{WebTransportSendStream}}, with:
    : {{WebTransportSendStream/[[InternalStream]]}}
    :: |internalStream|
    : {{[[PendingOperation]]}}
    :: null
    : {{WebTransportSendStream/[[Transport]]}}
    :: |transport|
1. Let |writeAlgorithm| be an action that [=writes=] |chunk| to |stream|, given |chunk|.
1. Let |closeAlgorithm| be an action that [=closes=] |stream|.
1. Let |abortAlgorithm| be an action that [=aborts=] |stream| with |reason|, given |reason|.
1. [=WritableStream/Set up=] |stream| with [=WritableStream/set up/writeAlgorithm=] set to
   |writeAlgorithm|, [=WritableStream/set up/closeAlgorithm=] set to |closeAlgorithm|,
   [=WritableStream/set up/abortAlgorithm=] set to |abortAlgorithm|.
1. [=AbortSignal/Add=] the following steps to |stream|'s \[[controller]]'s \[[signal]].
  1. If |stream|.{{[[PendingOperation]]}} is null, then abort these steps.
  1. Let |reason| be |stream|'s \[[controller]]'s \[[signal]]'s [=AbortSignal/abort reason=].
  1. Let |abortPromise| be the result of [=aborting=] stream with |reason|.
  1. [=Upon fulfillment=] of |abortPromise|, [=reject=] |promise| with |reason|.
  1. Let |pendingOperation| be |stream|.{{[[PendingOperation]]}}.
  1. Set |stream|.{{[[PendingOperation]]}} to null.
  1. [=Resolve=] |pendingOperation| with |promise|.
1. [=set/Append=] |stream| to |transport|.{{[[SendStreams]]}}.
1. Return |stream|.

</div>

<div algorithm>
To <dfn for="WebTransportSendStream">write</dfn> |chunk| to a {{WebTransportSendStream}} |stream|, run these steps:

1. Let |transport| be |stream|.{{WebTransportSendStream/[[Transport]]}}.
1. If |chunk| is not a {{BufferSource}}, return [=a promise rejected with=] a {{TypeError}}.
1. Let |promise| be a new promise.
1. Let |bytes| be a copy of the [=byte sequence=] which |chunk| represents.
1. Set |stream|.{{[[PendingOperation]]}} to |promise|.
1. Return |promise| and run the remaining steps [=in parallel=].
1. [=stream/Send=] |bytes| on |stream|.{{WebTransportSendStream/[[InternalStream]]}} and wait for the
   operation to complete.
   This sending MAY be interleaved with sending of previously queued streams and datagrams,
   as well as streams and datagrams yet to be queued to be sent over this transport.

   Note: Solving prioritization is an outstanding issue.
1. If the previous step failed, abort the remaining steps.

  Note: We don't reject |promise| here because we handle network errors elsewhere, and those steps
  error |stream| and reject the result of this write operation.

1. [=Queue a network task=] with |transport| to run these steps:
  1. Set |stream|.{{[[PendingOperation]]}} to null.
  1. [=Resolve=] |promise| with undefined.

Note: The user-agent MAY have a buffer to improve the transfer performance. Such a buffer
SHOULD have a fixed upper limit, to carry the backpressure information to the user of
{{WebTransportSendStream}}. This also means the [=fulfilled|fulfillment=] of the promise returned from this algorithm (or,
{{WritableStreamDefaultWriter/write|WritableStreamDefaultWriter.write}}) does **NOT** necessarily mean that the chunk is acked by
the server [[!QUIC]]. It may just mean that the chunk is appended to the buffer. To make sure that
the chunk arrives at the server, use an application-level protocol.

</div>

<div algorithm>
To <dfn for="WebTransportSendStream">close</dfn> a {{WebTransportSendStream}} |stream|, run these steps:

1. Let |transport| be |stream|.{{WebTransportSendStream/[[Transport]]}}.
1. Let |promise| be a new promise.
1. [=set/Remove=] |stream| from |transport|.{{[[SendStreams]]}}.
1. Set |stream|.{{[[PendingOperation]]}} to |promise|.
1. Return |promise| and run the remaining steps [=in parallel=].
1. [=stream/Send=] FIN on |stream|.{{WebTransportSendStream/[[InternalStream]]}} and wait for the operation to
   complete.
1. Wait for |stream|.{{WebTransportSendStream/[[InternalStream]]}} to enter the "Data Recvd" state. [[!QUIC]]
1. [=Queue a network task=] with |transport| to run these steps:
  1. Set |stream|.{{[[PendingOperation]]}} to null.
  1. [=Resolve=] |promise| with undefined.

</div>

<div algorithm>
To <dfn for="WebTransportSendStream">abort</dfn> a {{WebTransportSendStream}} |stream| with |reason|, run these steps:

1. Let |transport| be |stream|.{{WebTransportSendStream/[[Transport]]}}.
1. Let |promise| be a new promise.
1. Let |code| be 0.
1. [=set/Remove=] |stream| from |transport|.{{[[SendStreams]]}}.
1. If |reason| is a {{WebTransportError}} and |reasons|.{{WebTransportError/[[StreamErrorCode]]}} is not
   null, then set |code| to |reason|.{{WebTransportError/[[StreamErrorCode]]}}.
1. If |code| < 0, then set |code| to 0.
1. If |code| > 255, then set |code| to 255.

   Note: Valid values of |code| are from 0 to 255 inclusive. The code will be encoded to a number in
         [0x52e4a40fa8db, 0x52e4a40fa9e2] as decribed in [[WEB-TRANSPORT-HTTP3]].

1. Return |promise| and run the remaining steps [=in parallel=].
1. [=stream/Reset=] |stream|.{{WebTransportSendStream/[[InternalStream]]}} with |code|.
1. [=Queue a network task=] with |transport| to [=resolve=] |promise| with undefined.

</div>

## STOP_SENDING signal coming from the server ##  {#send-stream-STOP_SENDING}

<div algorithm="STOP_SENDING signal">
Whenever a [=WebTransport stream=] associated with a {{WebTransportSendStream}} |stream| gets a
[=stream-signal/STOP_SENDING=] signal from the server, run these steps:

1. Let |transport| be |stream|.{{WebTransportSendStream/[[Transport]]}}.
1. Let |code| be the application protocol error code attached to the STOP_SENDING frame. [[!QUIC]]

   Note: Valid values of |code| are from 0 to 255 inclusive. The code has been decoded from a number in
         [0x52e4a40fa8db, 0x52e4a40fa9e2] as decribed in [[WEB-TRANSPORT-HTTP3]].

1. [=Queue a network task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, abort these steps.
  1. [=set/Remove=] |stream| from |transport|.{{[[SendStreams]]}}.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"stream"`.
  1. Set |error|.{{WebTransportError/[[StreamErrorCode]]}} to |code|.
  1. [=WritableStream/Error=] |stream| with |error|.

</div>

## `WebTransportSendStreamStats` Dictionary ##  {#send-stream-stats}

The <dfn dictionary>WebTransportSendStreamStats</dfn> dictionary includes information
on stats specific to one {{WebTransportSendStream}}.

<pre class="idl">
dictionary WebTransportSendStreamStats {
  DOMHighResTimeStamp timestamp;
  unsigned long long bytesWritten;
  unsigned long long bytesSent;
  unsigned long long bytesAcknowledged;
};
</pre>

The dictionary SHALL have the following attributes:

: <dfn for="WebTransportSendStreamStats" dict-member>timestamp</dfn>
:: The `timestamp` for when the stats are gathered, relative to the
   UNIX epoch (Jan 1, 1970, UTC).
: <dfn for="WebTransportSendStreamStats" dict-member>bytesWritten</dfn>
:: The total number of bytes the application has successfully written to this
   {{WebTransportSendStream}}. This number can only increase.
: <dfn for="WebTransportSendStreamStats" dict-member>bytesSent</dfn>
:: An indicator of progress on how many of the application bytes written to this
   {{WebTransportSendStream}} has been sent at least once. This
   number can only increase, and is always less than or equal to
   {{WebTransportSendStreamStats/bytesWritten}}.
   
   Note: this is progress of app data sent on a single stream only, and does not
   include any network overhead.
: <dfn for="WebTransportSendStreamStats" dict-member>bytesAcknowledged</dfn>
:: An indicator of progress on how many of the application bytes written to this
   {{WebTransportSendStream}} have been sent and acknowledged as received by
   the server using QUIC's ACK mechanism. Only sequential bytes up to, but not
   including, the first non-acknowledged byte, are counted. This number can only
   increase and is always less than or equal to {{WebTransportSendStreamStats/bytesSent}}.

   Note: This value will match {{WebTransportSendStreamStats/bytesSent}} when
   the connection is over HTTP/2.

# Interface `WebTransportReceiveStream` #  {#receive-stream}

A {{WebTransportReceiveStream}} is a {{ReadableStream}} providing incoming streaming
features with an [=incoming unidirectional=] or [=bidirectional=]
[=WebTransport stream=].

It is a {{ReadableStream}} of {{Uint8Array}} that can be read from, to consume
data received from the server. {{WebTransportReceiveStream}} is a [=readable byte stream=],
and hence it allows
its consumers to use a [=BYOB reader=] as well as a [=default reader=].

A {{WebTransportReceiveStream}} is always created by the
[=WebTransportReceiveStream/create=] procedure.

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransportReceiveStream : ReadableStream {
  Promise&lt;WebTransportReceiveStreamStats&gt; getStats();
};
</pre>

A {{WebTransportReceiveStream}} is always created by the
[=WebTransportReceiveStream/create=] procedure.

## Methods ##  {#receive-stream-methods}

: <dfn for="WebTransportReceiveStream" method>getStats()</dfn>
:: Gathers stats specific to this {{WebTransportReceiveStream}}'s performance,
   and reports the result asynchronously.</p>

   When getStats is called, the user agent MUST run the following steps:
     1. Let |p| be a new promise.
     1. Return |p| and continue the following steps [=in parallel=].
         1. Gather the stats specific to this {{WebTransportReceiveStream}}.
         1. Wait for the stats to be ready.
         1. [=Queue a network task=] with |transport| to run the following steps:
           1. Let |stats| be a [=new=] {{WebTransportReceiveStreamStats}} object
              representing the gathered stats.
           1. [=Resolve=] |p| with |stats|.

## Internal Slots ## {#receive-stream-internal-slots}

A {{WebTransportReceiveStream}} has the following internal slots.

<table class="data" dfn-for="WebTransportReceiveStream" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[InternalStream]]`</dfn>
   <td class="non-normative">An [=incoming unidirectional=] or [=bidirectional=]
   [=WebTransport stream=].
  </tr>
  <tr>
   <td><dfn>`[[Transport]]`</dfn>
   <td class="non-normative">The {{WebTransport}} object owning this {{WebTransportReceiveStream}}.
  </tr>
</table>

## Procedures ##  {#receive-stream-procedures}

<div algorithm>

To <dfn export for="WebTransportReceiveStream" lt="create|creating">create</dfn> a
{{WebTransportReceiveStream}}, with an [=incoming unidirectional=] or [=bidirectional=] [=WebTransport stream=]
|internalStream| and a {{WebTransport}} |transport|, run these steps:

1. Let |stream| be a [=new=] {{WebTransportReceiveStream}}, with:
    : {{WebTransportReceiveStream/[[InternalStream]]}}
    :: |internalStream|
    : {{WebTransportReceiveStream/[[Transport]]}}
    :: |transport|
1. Let |pullAlgorithm| be an action that [=pulls bytes=] from |stream|.
1. Let |cancelAlgorithm| be an action that [=WebTransportReceiveStream/cancels=] |stream| with |reason|, given
   |reason|.
1. [=ReadableStream/Set up with byte reading support=] |stream| with
   [=ReadableStream/set up with byte reading support/pullAlgorithm=] set to |pullAlgorithm| and
   [=ReadableStream/set up with byte reading support/cancelAlgorithm=] set to |cancelAlgorithm|.
1. [=set/Append=] |stream| to |transport|.{{[[ReceiveStreams]]}}.
1. Return |stream|.

</div>

<div algorithm>

To <dfn for="WebTransportReceiveStream">pull bytes</dfn> from a {{WebTransportReceiveStream}} |stream|, run these steps.

1. Let |transport| be |stream|.{{WebTransportReceiveStream/[[Transport]]}}.
1. Let |internalStream| be |stream|.{{WebTransportReceiveStream/[[InternalStream]]}}.
1. Let |promise| be a new promise.
1. Let |buffer|, |offset|, and |maxBytes| be null.
1. If |stream|'s [=ReadableStream/current BYOB request view=] for |stream| is not null:
  1. Set |offset| to |stream|'s [=ReadableStream/current BYOB request view=].\[[ByteOffset]].
  1. Set |maxBytes| to |stream|'s [=ReadableStream/current BYOB request view=]'s
     [=BufferSource/byte length=].
  1. Set |buffer| to |stream|'s [=ReadableStream/current BYOB request view=]'s
     [=BufferSource/underlying buffer=].
1. Otherwise:
  1. Set |offset| to 0.
  1. Set |maxBytes| to an [=implementation-defined=] size.
  1. Set |buffer| be a [=new=] {{ArrayBuffer}} with |maxBytes| size. If allocating the
     {{ArrayBuffer}} fails, return [=a promise rejected with=] a {{RangeError}}.
1. Return |promise| and run the remaining steps [=in parallel=].
1. [=ArrayBuffer/Write=] the bytes that area [=stream/receive|read=] from |internalStream| into
   |buffer| with offset |offset|, up to |maxBytes| bytes. Wait until either at least one byte is
   read or FIN is received. Let |read| be the number of read bytes, and let |hasReceivedFIN| be
   whether FIN was accompanied.
   Note: The user-agent MAY have a buffer to improve the transfer performance. Such a buffer
   SHOULD have a fixed upper limit, to carry the backpressure information to the server.

   Note: This operation may return before filling up all of |bytes|.

1. If the previous step failed, abort the remaining steps.

  Note: We don't reject |promise| here because we handle network errors elsewhere, and those steps
  error |stream| and reject the result of this read operation.

1. [=Queue a network task=] with |transport| to run these steps:

   Note: If the buffer described above is available in the [=agent/event loop=] where this procedure is
   running, the following steps may run immediately.

  1. If |read| > 0:
    1. Set |view| to a new {{Uint8Array}} with |buffer|, |offset| and |read|.
    1. [=ReadableStream/Enqueue=] |view| into |stream|.
  1. If |hasReceivedFIN| is true:
    1. [=set/Remove=] |stream| from |transport|.{{[[ReceiveStreams]]}}.
    1. [=ReadableStream/Close=] |stream|.
  1. [=Resolve=] |promise| with undefined.

</div>

<div algorithm>

To <dfn for="WebTransportReceiveStream">cancel</dfn> a {{WebTransportReceiveStream}} |stream| with |reason|, run these
steps.

1. Let |transport| be |stream|.{{WebTransportReceiveStream/[[Transport]]}}.
1. Let |internalStream| be |stream|.{{WebTransportReceiveStream/[[InternalStream]]}}.
1. Let |promise| be a new promise.
1. Let |code| be 0.
1. If |reason| is a {{WebTransportError}} and |reasons|.{{WebTransportError/[[StreamErrorCode]]}} is not
   null, then set |code| to |reason|.{{WebTransportError/[[StreamErrorCode]]}}.
1. If |code| < 0, then set |code| to 0.
1. If |code| > 255, then set |code| to 255.

   Note: Valid values of |code| are from 0 to 255 inclusive. The code will be encoded to a number in
         [0x52e4a40fa8db, 0x52e4a40fa9e2] as decribed in [[WEB-TRANSPORT-HTTP3]].

1. [=set/Remove=] |stream| from |transport|.{{[[SendStreams]]}}.
1. Return |promise| and run the remaining steps [=in parallel=].
1. [=Send STOP_SENDING=] with |internalStream| and |code|.
1. [=Queue a network task=] with |transport| to run these steps:

  Note: If the buffer described above is available in the [=agent/event loop=] where this procedure is
  running, the following steps may run immediately.

  1. [=set/Remove=] |stream| from |transport|.{{[[ReceiveStreams]]}}.
  1. [=Resolve=] |promise| with undefined.

</div>

## Reset signal coming from the server ##  {#receive-stream-RESET_STREAM}

<div algorithm="reset signal">
Whenever a [=WebTransport stream=] associated with a {{WebTransportReceiveStream}} |stream| gets a
[=stream-signal/RESET_STREAM=] signal from the server, run these steps:

1. Let |transport| be |stream|.{{WebTransportReceiveStream/[[Transport]]}}.
1. Let |code| be the application protocol error code attached to the RESET_STREAM frame. [[!QUIC]]

   Note: Valid values of |code| are from 0 to 255 inclusive. The code has been decoded from a number in
         [0x52e4a40fa8db, 0x52e4a40fa9e2] as decribed in [[WEB-TRANSPORT-HTTP3]].

1. [=Queue a network task=] with |transport| to run these steps:
  1. If |transport|.{{[[State]]}} is `"closed"` or `"failed"`, abort these steps.
  1. [=set/Remove=] |stream| from |transport|.{{[[ReceiveStreams]]}}.
  1. Let |error| be the result of [=WebTransportError/creating=] a {{WebTransportError}} with
     `"stream"`.
  1. Set |error|.{{WebTransportError/[[StreamErrorCode]]}} to |code|.
  1. [=ReadableStream/Error=] |stream| with |error|.

</div>

## `WebTransportReceiveStreamStats` Dictionary ##  {#receive-stream-stats}

The <dfn dictionary>WebTransportReceiveStreamStats</dfn> dictionary includes
information on stats specific to one {{WebTransportReceiveStream}}.

<pre class="idl">
dictionary WebTransportReceiveStreamStats {
  DOMHighResTimeStamp timestamp;
  unsigned long long bytesReceived;
  unsigned long long bytesRead;
};
</pre>

The dictionary SHALL have the following attributes:

: <dfn for="WebTransportReceiveStreamStats" dict-member>timestamp</dfn>
:: The `timestamp` for when the stats are gathered, relative to the
   UNIX epoch (Jan 1, 1970, UTC).
: <dfn for="WebTransportReceiveStreamStats" dict-member>bytesReceived</dfn>
:: An indicator of progress on how many of the server application's bytes
   intended for this {{WebTransportReceiveStream}} have been received so far.
   Only sequential bytes up to, but not including, the first missing byte, are
   counted. This number can only increase.

   Note: this is progress of app data received on a single stream only, and does
   not include any network overhead.
: <dfn for="WebTransportReceiveStreamStats" dict-member>bytesRead</dfn>
:: The total number of bytes the application has successfully read from this
   {{WebTransportReceiveStream}}. This number can only increase, and is always
   less than or equal to {{WebTransportReceiveStreamStats/bytesReceived}}.

# Interface `WebTransportBidirectionalStream` #  {#bidirectional-stream}

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransportBidirectionalStream {
  readonly attribute ReadableStream readable;
  readonly attribute WritableStream writable;
};
</pre>

## Internal slots ## {#bidirectional-stream-internal-slots}

A {{WebTransportBidirectionalStream}} has the following internal slots.

<table class="data" dfn-for="WebTransportBidirectionalStream" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[Readable]]`</dfn>
   <td class="non-normative">A {{WebTransportReceiveStream}}.
  </tr>
  <tr>
   <td><dfn>`[[Writable]]`</dfn>
   <td class="non-normative">A {{WebTransportSendStream}}.
  </tr>
  <tr>
   <td><dfn>`[[Transport]]`</dfn>
   <td class="non-normative">The {{WebTransport}} object owning this
   {{WebTransportBidirectionalStream}}.
  </tr>
</table>

## Attributes ##  {#bidirectional-stream-attributes}

: <dfn for="WebTransportBidirectionalStream" attribute>readable</dfn>
:: The getter steps are to return [=this=]'s {{WebTransportBidirectionalStream/[[Readable]]}}.

: <dfn for="WebTransportBidirectionalStream" attribute>writable</dfn>
:: The getter steps are to return [=this=]'s {{WebTransportBidirectionalStream/[[Writable]]}}.

## Procedures ## {#bidirectional-stream-procedures}

<div algorithm="create a BidirectionalStream">
To <dfn for=BidirectionalStream>create</dfn> a {{WebTransportBidirectionalStream}} with a
[=bidirectional=] [=WebTransport stream=] |internalStream| and a {{WebTransport}}
object |transport|, run these steps.

1. Let |readable| be the result of [=WebTransportReceiveStream/creating=] a {{WebTransportReceiveStream}} with
   |internalStream| and |transport|.
1. Let |writable| be the result of [=WebTransportSendStream/creating=] a {{WebTransportSendStream}} with
   |internalStream| and |transport|.
1. Let |stream| be a [=new=] {{WebTransportBidirectionalStream}}, with:
    : {{WebTransportBidirectionalStream/[[Readable]]}}
    :: |readable|
    : {{WebTransportBidirectionalStream/[[Writable]]}}
    :: |writable|
    : {{WebTransportBidirectionalStream/[[Transport]]}}
    :: |transport|
1. Return |stream|.

</div>

# `WebTransportError` Interface #  {#web-transport-error-interface}

<dfn interface>WebTransportError</dfn> is a subclass of {{DOMException}} that represents

 - An error coming from the server or the network, or
 - A reason for a client-initiated abort operation.

<pre class="idl">
[Exposed=(Window,Worker), SecureContext]
interface WebTransportError : DOMException {
  constructor(optional WebTransportErrorInit init = {});

  readonly attribute WebTransportErrorSource source;
  readonly attribute octet? streamErrorCode;
};

dictionary WebTransportErrorInit {
  [Clamp] octet streamErrorCode;
  DOMString message;
};

enum WebTransportErrorSource {
  "stream",
  "session",
};
</pre>

## Internal slots  ## {#web-transport-error-internal-slots}

A {{WebTransportError}} has the following internal slots.

<table class="data" dfn-for="WebTransportError" dfn-type="attribute">
 <thead>
  <tr>
   <th>Internal Slot
   <th>Description (<em>non-normative</em>)
  </tr>
 </thead>
 <tbody>
  <tr>
   <td><dfn>`[[Source]]`</dfn>
   <td class="non-normative">A {{WebTransportErrorSource}} indicating the source of this error.
  </tr>
  <tr>
   <td><dfn>`[[StreamErrorCode]]`</dfn>
   <td class="non-normative">The application protocol error code for this error, or null.
  </tr>
 </tbody>
</table>

## Constructor ##  {#web-transport-error-constructor1}

<div algorithm>

The <dfn constructor for="WebTransportError"
lt="WebTransportError(init)">new WebTransportError(init)</dfn> constructor steps are:

1. Let |error| be [=this=].
1. Let |message| be |init|.{{WebTransportErrorInit/message}} if it exists, and `""` otherwise.
1. [=WebTransportError/Set up=] |error| with |message| and `"stream"`.
1. Set |error|.{{WebTransportError/[[StreamErrorCode]]}} to |init|.{{WebTransportErrorInit/streamErrorCode}} if it exists.

</div>

## Attributes ## {#web-transport-error-attributes}

: <dfn for="WebTransportError" attribute>source</dfn>
:: The getter steps are to return [=this=]'s {{WebTransportError/[[Source]]}}.
: <dfn for="WebTransportError" attribute>streamErrorCode</dfn>
:: The getter steps are to return [=this=]'s {{WebTransportError/[[StreamErrorCode]]}}.

## Procedures ## {#web-transport-error-procedures}

<div algorithm>

To <dfn for="WebTransportError">create</dfn> a {{WebTransportError}} |error| with a
{{WebTransportErrorSource}} |source|, run these steps:

1. Let |message| be an [=implementation-defined=] string.
1. Let |error| be a [=new=] {{WebTransportError}}.
1. [=Set up=] |error| with |message| and |source|.

</div>

<div algorithm>

To <dfn for="WebTransportError">set up</dfn> a {{WebTransportError}} |error| with a {{DOMString}}
|message| and a {{WebTransportErrorSource}} |source|, run these steps:

1. Set |error|'s internal slots as:
    : {{WebTransportError/[[StreamErrorCode]]}}
    :: null
    : {{WebTransportError/[[Source]]}}
    :: |source|
1. Run [=DOMException/new DOMException(message, name)=] constructor steps with |error|, |message|
   and `"WebTransportError"`.

   Note: This name does not have a mapping to a legacy code, so [=this=]'s {{DOMException/code}}
   is 0.

</div>

# Protocol Mappings # {#protocol-mapping}

*This section is non-normative.*

This section describes the [[QUIC]] protocol behavior of methods defined
in this specification, utilizing [[WEB-TRANSPORT-HTTP3]]. Cause and effect may
not be immediate due to buffering.

  <table class="data">
    <colgroup class="header"><col></colgroup>
    <colgroup><col></colgroup>
    <thead>
      <tr>
        <th>API Method</th>
        <th>QUIC Protocol Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>{{WebTransportBidirectionalStream/writable}}.{{WritableStream/abort}}(errorCode)</td>
        <td>[=stream/Reset|sends RESET_STREAM=] with errorCode</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/writable}}.{{WritableStream/close}}()</td>
        <td>[=stream/Send|sends=] STREAM_FINAL</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/writable}}.getWriter().{{WritableStreamDefaultWriter/write}}()</td>
        <td>[=stream/Send|sends=] STREAM</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/writable}}.getWriter().{{WritableStreamDefaultWriter/close}}()</td>
        <td>[=stream/Send|sends=] STREAM_FINAL</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/writable}}.getWriter().{{WritableStreamDefaultWriter/abort}}(errorCode)</td>
        <td>[=stream/Reset|sends RESET_STREAM=] with errorCode</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/readable}}.{{ReadableStream/cancel}}(errorCode)</td>
        <td>[=send STOP_SENDING|sends STOP_SENDING=] with errorCode</td>
      </tr>
      <tr>
        <td>{{WebTransportBidirectionalStream/readable}}.getReader().{{ReadableStreamGenericReader/cancel}}(errorCode)</td>
        <td>[=send STOP_SENDING|sends STOP_SENDING=] with errorCode</td>
      </tr>
      <tr>
        <td>wt.{{WebTransport/close}}(closeInfo)</td>
        <td>[=session/terminate|terminates=] session with closeInfo<br>
      </tr>
    </tbody>
  </table>

  <table class="data">
    <colgroup class="header"><col></colgroup>
    <colgroup><col></colgroup>
    <thead>
      <tr>
        <th>QUIC Protocol Action</th>
        <th>API Effect</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>received [=stream-signal/STOP_SENDING=] with errorCode</td>
        <td>[=WritableStream/Error|errors=] {{WebTransportBidirectionalStream/writable}}
        with {{WebTransportError/streamErrorCode}}</td>
      </tr>
      <tr>
        <td>[=stream/Receive|received=] STREAM</td>
        <td>(await
          {{WebTransportBidirectionalStream/readable}}.getReader().{{ReadableStreamDefaultReader/read}}()).value</td>
      </tr>
      <tr>
        <td>[=stream/Receive|received=] STREAM_FINAL</td>
        <td>(await
          {{WebTransportBidirectionalStream/readable}}.getReader().{{ReadableStreamDefaultReader/read}}()).done</td>
      </tr>
      <tr>
        <td>received [=stream-signal/RESET_STREAM=] with errorCode</td>
        <td>[=ReadableStream/Error|errors=] {{WebTransportBidirectionalStream/readable}}
        with {{WebTransportError/streamErrorCode}}</td>
      </tr>
      <tr>
        <td>Session cleanly [=session/terminated|terminated=] with closeInfo<br>
        <td>(await wt.{{WebTransport/closed}}).closeInfo, and
         [=ReadableStream/error|errors=] open streams</td>
      </tr>
      <tr>
        <td>Network error<br>
        <td>(await wt.{{WebTransport/closed}}) rejects, and
          [=ReadableStream/error|errors=] open streams</td>
      </tr>
    </tbody>
  </table>

# Privacy and Security Considerations #  {#privacy-security}

This section is non-normative; it specifies no new behaviour, but instead
summarizes information already present in other parts of the specification.

## Confidentiality of Communications ##  {#confidentiality}

The fact that communication is taking place cannot be hidden from adversaries
that can observe the network, so this has to be regarded as public information.

All of the transport protocols described in this document use either TLS
[[RFC8446]] or a semantically equivalent protocol, thus providing all of the
security properties of TLS, including confidentiality and integrity of the
traffic. WebTransport over HTTP uses the same certificate verification
mechanism as outbound HTTP requests, thus relying on the same public key
infrastructure for authentication of the remote server. In WebTransport,
certificate verification errors are fatal; no interstitial allowing bypassing
certificate validation is available.

## State Persistence ##  {#state-persistence}

WebTransport by itself does not create any new unique identifiers or new ways
to persistently store state, nor does it automatically expose any of the
existing persistent state to the server. For instance, none of the transports
defined in this document automatically send cookies, support HTTP
authentication or caching invalidation mechanisms. Since they use TLS, they may
support TLS session tickets, which could be used by the server (though not by
passive network observers) to correlate different connections from the same
client. This is not specific to WebTransport by itself, but rather an inherent
property of all TLS-based protocols; thus, this is out-of-scope for this
specification.

## Protocol Security ##  {#protocol-security}

WebTransport imposes a set of requirements as described in
[[!WEB-TRANSPORT-OVERVIEW]], including:

1. Ensuring that the remote server is aware that the WebTransport protocol is in
   use and confirming that the remote server is willing to use the WebTransport
   protocol. [[WEB-TRANSPORT-HTTP3]] uses a combination of ALPN [[RFC7301]], an
   HTTP/3 setting, and a `:protocol` pseudo-header to identify the WebTransport
   protocol.
1. Allowing the server to filter connections based on the origin of the resource
   originating the transport session.  The <a http-header><code>Origin</code></a> header
   field on the session establishment request carries this information.

Protocol security considerations related are described in the
*Security Considerations* sections of [[!WEB-TRANSPORT-HTTP3]].

Networking APIs can be commonly used to scan the local network for available
hosts, and thus be used for fingerprinting and other forms of attacks.
WebTransport follows the [WebSocket
approach](https://html.spec.whatwg.org/multipage/web-sockets.html#feedback-from-the-protocol)
to this problem: the specific connection error is not returned until an
endpoint is verified to be a WebTransport endpoint; thus, the Web application
cannot distinguish between a non-existing endpoint and the endpoint that is not
willing to accept connections from the Web.

## Authentication using Certificate Hashes {#certificate-hashes}

Normally, a user agent authenticates a TLS connection between itself and a
remote endpoint by verifying the validity of the TLS server certificate
provided against the server name in the URL [[!RFC6125]].  This is accomplished
by chaining server certificates to one of the trust anchors maintained by the
user agent; the trust anchors in question are responsible for authenticating
the server names in the certificates.  We will refer to this system as Web PKI.

This API provides web applications with a capability to connect to a remote
network endpoint authenticated by a specific server certificate, rather than
its server name.  This mechanism enables connections to endpoints for which
getting long-term certificates can be challenging, including hosts that are
ephemeral in nature (e.g. short-lived virtual machines), or that are not
publicly routable.  Since this mechanism substitutes Web PKI-based
authentication for an individual connection, we need to compare the security
properties of both.

A remote server will be able to successfully perform a TLS handshake only if it
posesses the private key corresponding to the public key of the certificate
specified.  The API identifies the certificates using their hashes.  That is
only secure as long as the cryptographic hash function used has second-preimage
resistance.  The only function defined in this document is SHA-256; the API
provides a way to introduce new hash functions through allowing multiple
algorithm-hash pairs to be specified.

It is important to note that Web PKI provides additional security
mechanisms in addition to simply establishing a chain of trust for a server
name.  One of them is handling certificate revocation.  In cases where the
certificate used is ephemeral, such a mechanism is not necessary.  In other
cases, the Web application has to consider the mechanism by which the
certificate hashes are provisioned; for instance, if the hash is provided as a
cached HTTP resource, the cache needs to be invalidated if the corresponding
certificate has been rotated due to compromise.  Another security feature
provided by the Web PKI are safeguards against certain issues with key
generation, such as rejecting certificates with known weak keys; while
this specification does not provide any specific guidance, browsers MAY reject
those as a part of implementation-defined behavior.

Web PKI enforces an expiry period requirement on the certificates.  This
requirement limits the scope of potential key compromise; it also forces server
operators to design systems that support and actively perform key rotation.
For this reason, WebTransport imposes a similar expiry requirement; as the
certificates are expected to be ephemeral or short-lived, the expiry period is
limited to two weeks.  The two weeks limit is a balance between setting the
expiry limit as low as possible to minimize consequences of a key compromise,
and maintaining it sufficiently high to accomodate for clock skew across
devices, and to lower the costs of synchronizing certificates between the
client and the server side.

The WebTransport API lets the application specify multiple certificate
hashes at once, allowing the client to accept multiple certificates for a
period in which a new certificate is being rolled out.

Unlike a similar mechanism in WebRTC, the server certificate hash API in
WebTransport does not provide any means of authenticating the client; the fact
that the client knows what the server certificate is or how to contact it is
not sufficient.  The application has to establish the identity of the client
in-band if necessary.

# Examples #  {#examples}

## Sending a buffer of datagrams ##  {#example-datagrams}

*This section is non-normative.*

Sending a buffer of datagrams can be achieved by using the
{{WebTransport/datagrams}}' {{WebTransportDatagramDuplexStream/writable}} attribute. In the
following example datagrams are only sent if the transport is ready to send.

<pre class="example" highlight="js">
async function sendDatagrams(url, datagrams) {
  const wt = new WebTransport(url);
  const writer = wt.datagrams.writable.getWriter();
  for (const datagram of datagrams) {
    await writer.ready;
    writer.write(datagram).catch(() => {});
  }
}
</pre>

## Sending datagrams at a fixed rate ##  {#example-fixed-rate}

*This section is non-normative.*

Sending datagrams at a fixed rate regardless if the transport is ready to send
can be achieved by simply using {{WebTransport/datagrams}}'
{{WebTransportDatagramDuplexStream/writable}} and not using the `ready` attribute. More complex
scenarios can utilize the `ready` attribute.

<pre class="example" highlight="js">
// Sends datagrams every 100 ms.
async function sendFixedRate(url, createDatagram, ms = 100) {
  const wt = new WebTransport(url);
  await wt.ready;
  const writer = wt.datagrams.writable.getWriter();
  const datagram = createDatagram();
  setInterval(() => writer.write(datagram).catch(() => {}), ms);
}
</pre>

## Receiving datagrams ##  {#example-receiving-datagrams}

*This section is non-normative.*

Datagrams can be received by reading from the
transport.{{WebTransport/datagrams}}.{{WebTransportDatagramDuplexStream/readable}}
attribute. Null values may indicate that packets are not being processed quickly
enough.

<pre class="example" highlight="js">
async function receiveDatagrams(url) {
  const wt = new WebTransport(url);
  for await (const datagram of wt.datagrams.readable) {
    // Process the datagram
  }
}
</pre>

## Sending a stream ##  {#example-sending-stream}

*This section is non-normative.*

Sending data as a one-way stream can be achieved by using the
{{WebTransport/createUnidirectionalStream}} function and the resulting stream's writer.

<pre class="example" highlight="js">
async function sendData(url, data) {
  const wt = new WebTransport(url);
  const writable = await wt.createUnidirectionalStream();
  const writer = writable.getWriter();
  await writer.write(data);
  await writer.close();
}
</pre>

Encoding can also be done through pipes from a {{ReadableStream}}, for example using
{{TextEncoderStream}}.

<pre class="example" highlight="js">
async function sendText(url, readableStreamOfTextData) {
  const wt = new WebTransport(url);
  const writable = await wt.createUnidirectionalStream();
  await readableStreamOfTextData
    .pipeThrough(new TextEncoderStream("utf-8"))
    .pipeTo(writable);
}
</pre>

## Receiving incoming streams ##  {#example-receiving-incoming-streams}

*This section is non-normative.*

Reading incoming streams can be achieved by iterating over the
{{WebTransport/incomingUnidirectionalStreams}} attribute,
and then consuming each {{WebTransportReceiveStream}} by iterating over its chunks.

<pre class="example" highlight="js">
async function receiveData(url, processTheData) {
  const wt = new WebTransport(url);
  for await (const readable of wt.incomingUnidirectionalStreams) {
    // consume streams individually, reporting per-stream errors
    ((async () => {
      try {
        for await (const chunk of readable) {
          processTheData(chunk);
        }
      } catch (e) {
        console.error(e);
      }
    })());
  }
}
</pre>

Decoding can also be done through pipes to new WritableStreams, for example using
{{TextDecoderStream}}. This example assumes text output should not be
interleaved, and therefore only reads one stream at a time.

<pre class="example" highlight="js">
async function receiveText(url, createWritableStreamForTextData) {
  const wt = new WebTransport(url);
  for await (const readable of wt.incomingUnidirectionalStreams) {
    // consume sequentially to not interleave output, reporting per-stream errors
    try {
      await readable
       .pipeThrough(new TextDecoderStream("utf-8"))
       .pipeTo(createWritableStreamForTextData());
    } catch (e) {
      console.error(e);
    }
  }
}
</pre>

## Complete example ##  {#example-complete}

*This section is non-normative.*

This example illustrates use of the closed and ready promises, opening
of uni-directional and bi-directional streams by either the client or
the server, and sending and receiving datagrams.

<pre class="example" highlight="js">
// Adds an entry to the event log on the page, optionally applying a specified
// CSS class.

let wt, streamNumber, datagramWriter;

connect.onclick = async () => {
  try {
    const url = document.getElementById('url').value;

    wt = new WebTransport(url);
    addToEventLog('Initiating connection...');
    await wt.ready;
    addToEventLog(\`${(wt.reliability == "reliable-only")? "TCP" : "UDP"} \` +
                  \`connection ready.\`);
    wt.closed
      .then(() => addToEventLog('Connection closed normally.'))
      .catch(() => addToEventLog('Connection closed abruptly.', 'error'));

    streamNumber = 1;
    datagramWriter = wt.datagrams.writable.getWriter();

    readDatagrams();
    acceptUnidirectionalStreams();
    document.forms.sending.elements.send.disabled = false;
    document.getElementById('connect').disabled = true;
  } catch (e) {
    addToEventLog(&#96;Connection failed. ${e}&#96;, 'error');
  }
}

sendData.onclick = async () => {
  const form = document.forms.sending.elements;
  const rawData = sending.data.value;
  const data = new TextEncoder('utf-8').encode(rawData);
  try {
    switch (form.sendtype.value) {
      case 'datagram': {
        await datagramWriter.write(data);
        addToEventLog(&#96;Sent datagram: ${rawData}&#96;);
        break;
      }
      case 'unidi': {
        const writable = await wt.createUnidirectionalStream();
        const writer = writable.getWriter();
        await writer.write(data);
        await writer.close();
        addToEventLog(&#96;Sent a unidirectional stream with data: ${rawData}&#96;);
        break;
      }
      case 'bidi': {
        const duplexStream = await wt.createBidirectionalStream();
        const n = streamNumber++;
        readFromIncomingStream(duplexStream.readable, n);

        const writer = duplexStream.writable.getWriter();
        await writer.write(data);
        await writer.close();
        addToEventLog(&#96;Sent bidirectional stream #${n} with data: ${rawData}&#96;);
        break;
      }
    }
  } catch (e) {
    addToEventLog(&#96;Error while sending data: ${e}&#96;, 'error');
  }
}

// Reads datagrams into the event log until EOF is reached.
async function readDatagrams() {
  try {
    const decoder = new TextDecoderStream('utf-8');

    for await (const data of wt.datagrams.readable.pipeThrough(decoder)) {
      addToEventLog(&#96;Datagram received: ${data}&#96;);
    }
    addToEventLog('Done reading datagrams!');
  } catch (e) {
    addToEventLog(&#96;Error while reading datagrams: ${e}&#96;, 'error');
  }
}

async function acceptUnidirectionalStreams() {
  try {
    for await (const readable of wt.incomingUnidirectionalStreams) {
      const number = streamNumber++;
      addToEventLog(&#96;New incoming unidirectional stream #${number}&#96;);
      readFromIncomingStream(readable, number);
    }
    addToEventLog('Done accepting unidirectional streams!');
  } catch (e) {
    addToEventLog(&#96;Error while accepting streams ${e}&#96;, 'error');
  }
}

async function readFromIncomingStream(readable, number) {
  try {
    const decoder = new TextDecoderStream('utf-8');
    for await (const chunk of readable.pipeThrough(decoder)) {
      addToEventLog(&#96;Received data on stream #${number}: ${chunk}&#96;);
    }
    addToEventLog(&#96;Stream #${number} closed&#96;);
  } catch (e) {
    addToEventLog(&#96;Error while reading from stream #${number}: ${e}&#96;, 'error');
    addToEventLog(&#96;    ${e.message}&#96;);
  }
}

function addToEventLog(text, severity = 'info') {
  const log = document.getElementById('event-log');
  const previous = log.lastElementChild;
  const entry = document.createElement('li');
  entry.innerText = text;
  entry.className = &#96;log-${severity}&#96;;
  log.appendChild(entry);

  // If the previous entry in the log was visible, scroll to the new element.
  if (previous &&
      previous.getBoundingClientRect().top < log.getBoundingClientRect().bottom) {
    entry.scrollIntoView();
  }
}
</pre>

# Acknowledgements #  {#acknowledgements}
The editors wish to thank the Working Group chairs and Team Contact, Jan-Ivar Bruaroey, Will Law
and Yves Lafon, for their support.

The {{WebTransport}} interface is based on the `QuicTransport` interface
initially described in the [W3C ORTC CG](https://www.w3.org/community/ortc/),
and has been adapted for use in this specification.
